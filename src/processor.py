"""
Author: Daniel Redder
"""





def marginilizer(edge, scope):
    results = []
    for pathind in range(len(edge)):
        path = edge[pathind]
        for sumind in range(len(path)):
            for prodind in range(1,len(path[sumind])):
                path[sumind][prodind].append(scope[path[sumind][prodind][0]])
        edge[pathind] = path
    return edge


def processor(part, data, marginals, rootWeights):
    """
    :param part: partitioned SPN list
    :param data: dictionary of variables where if value if predicted then included in dic otherwise None
    :param marginals: dictionary of variables 1=marginalize, 0=read value from data
    :param rootWeights: the rootweights associated with each component of the partition
    :return:
    """
    scope = marginals

    for x in marginals:
        if not data[x] is None and marginals[x] == 0:
            scope[x] = data[x]

    part = marginilizer(part, scope)


    edgeArch = []
    for x in part:
        edgeArch.append(0)
        for sumind in range(len(x)):
            hold = float(x[sumind][0])
            #print(hold)
            for i in range(1,len(x[sumind])):
                if x[sumind][i][3]<1:
                    #print(x[sumind][i][2][0])
                    hold*=x[sumind][i][2][0]
                elif x[sumind][i][3]>1:
                    hold*=x[sumind][i][2][1]

            edgeArch[-1]+=hold


    return sum([edgeArch[x]*rootWeights[x] for x in range(len(edgeArch))])




def getTestNodes():
    return {"data": {"V0": 0.8, "V1": 0.8, "V2": 0.8, "V3": 0.8, "V4": 0.8, "V5": 0.8, "V6": 0.8, "V7": 0.8, "V8": 0.8, "V9": None, "V10": 0.8, "V11": 0.8, "V12": 0.8, "V13": 0.8, "V14": 0.8, "V15": 0.8, "V16": 0.8, "V17": 0.8, "V18": 0.8, "V19": 0.8, "V20": 0.8, "V21": 0.8, "V22": 0.8, "V23": 0.8, "V24": 0.8, "V25": 0.8, "V26": 0.8, "V27": 0.8, "V28": 0.8, "V29": 0.8, "V30": 0.8, "V31": 0.8, "V32": 0.8, "V33": 0.8, "V34": 0.8, "V35": 0.8, "V36": 0.8, "V37": 0.8, "V38": 0.8, "V39": 0.8, "V40": 0.8, "V41": 0.8, "V42": 0.8, "V43": 0.8, "V44": 0.8, "V45": 0.8, "V46": 0.8, "V47": 0.8, "V48": 0.8, "V49": 0.8, "V50": 0.8, "V51": 0.8, "V52": 0.8, "V53": 0.8, "V54": 0.8, "V55": 0.8, "V56": 0.8, "V57": 0.8, "V58": 0.8, "V59": 0.8, "V60": 0.8, "V61": 0.8, "V62": 0.8, "V63": 0.8, "V64": 0.8, "V65": 0.8, "V66": 0.8, "V67": 0.8, "V68": 0.8, "V69": 0.8, "V70": 0.8, "V71": 0.8, "V72": 0.8, "V73": 0.8, "V74": 0.8, "V75": 0.8, "V76": 0.8, "V77": 1.4, "V78": 0.8, "V79": 0.8, "V80": 0.8, "V81": 0.8, "V82": 0.8, "V83": 0.8, "V84": 0.8, "V85": 0.8, "V86": 0.8, "V87": 0.8, "V88": 0.8, "V89": 0.8, "V90": 0.8, "V91": 0.8, "V92": 0.8, "V93": 0.8, "V94": 0.8, "V95": 0.8, "V96": 0.8, "V97": 0.8, "V98": 0.8, "V99": 0.8}, "marginal": {"V0": 0, "V1": 0, "V2": 0, "V3": 0, "V4": 0, "V5": 0, "V6": 0, "V7": 0, "V8": 0, "V9": 1, "V10": 0, "V11": 0, "V12": 0, "V13": 0, "V14": 0, "V15": 0, "V16": 0, "V17": 0, "V18": 0, "V19": 0, "V20": 0, "V21": 0, "V22": 0, "V23": 0, "V24": 0, "V25": 0, "V26": 0, "V27": 0, "V28": 0, "V29": 0, "V30": 0, "V31": 0, "V32": 0, "V33": 0, "V34": 0, "V35": 0, "V36": 0, "V37": 0, "V38": 0, "V39": 0, "V40": 0, "V41": 0, "V42": 0, "V43": 0, "V44": 0, "V45": 0, "V46": 0, "V47": 0, "V48": 0, "V49": 0, "V50": 0, "V51": 0, "V52": 0, "V53": 0, "V54": 0, "V55": 0, "V56": 0, "V57": 0, "V58": 0, "V59": 0, "V60": 0, "V61": 0, "V62": 0, "V63": 0, "V64": 0, "V65": 0, "V66": 0, "V67": 0, "V68": 0, "V69": 0, "V70": 0, "V71": 0, "V72": 0, "V73": 0, "V74": 0, "V75": 0, "V76": 0, "V77": 0, "V78": 0, "V79": 0, "V80": 0, "V81": 0, "V82": 0, "V83": 0, "V84": 0, "V85": 0, "V86": 0, "V87": 0, "V88": 0, "V89": 0, "V90": 0, "V91": 0, "V92": 0, "V93": 0, "V94": 0, "V95": 0, "V96": 0, "V97": 0, "V98": 0, "V99": 0}, "spn": [[["0.3272413793103448", ["V72", [0, 1, 2], [0.2468, 0.7532]], ["V76", [0, 1, 2], [0.2468, 0.7532]], ["V77", [0, 1, 2], [0.1258, 0.8742]], ["V78", [0, 1, 2], [0.2968, 0.7032]], ["V79", [0, 1, 2], [0.2537, 0.7463]], ["V73", [0, 1, 2], [0.8225, 0.1775]], ["V74", [0, 1, 2], [0.697, 0.303]], ["V75", [0, 1, 2], [0.4364, 0.5636]], ["V80", [0, 1, 2], [0.5017, 0.4983]], ["V81", [0, 1, 2], [0.63, 0.37]], ["V82", [0, 1, 2], [0.4891, 0.5109]], ["V83", [0, 1, 2], [0.6451, 0.3549]], ["V84", [0, 1, 2], [0.6555, 0.3445]], ["V93", [0, 1, 2], [0.00037092, 0.99963]], ["V85", [0, 1, 2], [0.4058, 0.5942]]], ["0.5355172413793103", ["V93", [0, 1, 2], [0.99968, 0.00032175]], ["V85", [0, 1, 2], [0.8491, 0.1509]], ["V86", [0, 1, 2], [0.4922, 0.5078]], ["V87", [0, 1, 2], [0.4567, 0.5433]], ["V88", [0, 1, 2], [0.3183, 0.6817]], ["V89", [0, 1, 2], [0.635, 0.365]], ["V90", [0, 1, 2], [0.4659, 0.5341]], ["V91", [0, 1, 2], [0.5614, 0.4386]], ["V92", [0, 1, 2], [0.4243, 0.5757]], ["V94", [0, 1, 2], [0.5414, 0.4586]], ["V96", [0, 1, 2], [0.00034518, 0.99965]], ["V95", [0, 1, 2], [0.3687, 0.6313]]], ["0.5008620689655172", ["V96", [0, 1, 2], [0.99966, 0.000344]], ["V95", [0, 1, 2], [0.6753, 0.3247]], ["V97", [0, 1, 2], [0.5882, 0.4118]], ["V98", [0, 1, 2], [0.6837, 0.3163]], ["V99", [0, 1, 2], [0.5884, 0.4116]]]], [["0.34085315832649715", ["V66", [0, 1, 2], [0.9996, 0.0004008]], ["V8", [0, 1, 2], [0.5074, 0.4926]], ["V9", [0, 1, 2], [0.2135, 0.7865]], ["V10", [0, 1, 2], [0.153, 0.847]], ["V11", [0, 1, 2], [0.1386, 0.8614]], ["V12", [0, 1, 2], [0.5141, 0.4859]], ["V13", [0, 1, 2], [0.1715, 0.8285]], ["V14", [0, 1, 2], [0.5641, 0.4359]], ["V15", [0, 1, 2], [0.6204, 0.3796]], ["V16", [0, 1, 2], [0.4725, 0.5275]], ["V17", [0, 1, 2], [0.4095, 0.5905]], ["V18", [0, 1, 2], [0.3078, 0.6922]], ["V19", [0, 1, 2], [0.4271, 0.5729]], ["V20", [0, 1, 2], [0.1309, 0.8691]], ["V21", [0, 1, 2], [0.1956, 0.8044]], ["V22", [0, 1, 2], [0.2553, 0.7447]], ["V23", [0, 1, 2], [0.4307, 0.5693]], ["V24", [0, 1, 2], [0.2206, 0.7794]], ["V25", [0, 1, 2], [0.1713, 0.8287]], ["V26", [0, 1, 2], [0.11, 0.89]], ["V27", [0, 1, 2], [0.17, 0.83]], ["V28", [0, 1, 2], [0.1324, 0.8676]], ["V29", [0, 1, 2], [0.2728, 0.7272]], ["V30", [0, 1, 2], [0.1464, 0.8536]], ["V31", [0, 1, 2], [0.1011, 0.8989]], ["V32", [0, 1, 2], [0.4006, 0.5994]], ["V33", [0, 1, 2], [0.2057, 0.7943]], ["V34", [0, 1, 2], [0.1035, 0.8965]], ["V35", [0, 1, 2], [0.1042, 0.8958]], ["V36", [0, 1, 2], [0.4103, 0.5897]], ["V37", [0, 1, 2], [0.1699, 0.8301]], ["V38", [0, 1, 2], [0.1713, 0.8287]], ["V39", [0, 1, 2], [0.1959, 0.8041]], ["V40", [0, 1, 2], [0.2944, 0.7056]], ["V41", [0, 1, 2], [0.1415, 0.8585]], ["V42", [0, 1, 2], [0.338, 0.662]], ["V43", [0, 1, 2], [0.8001, 0.1999]], ["V56", [0, 1, 2], [0.7711, 0.2289]], ["V57", [0, 1, 2], [0.9091, 0.0909]]], ["0.4722450095706864", ["V43", [0, 1, 2], [0.1291, 0.8709]], ["V56", [0, 1, 2], [0.094, 0.906]], ["V57", [0, 1, 2], [0.32, 0.68]], ["V44", [0, 1, 2], [0.1744, 0.8256]], ["V45", [0, 1, 2], [0.181, 0.819]], ["V46", [0, 1, 2], [0.1564, 0.8436]], ["V47", [0, 1, 2], [0.156, 0.844]], ["V48", [0, 1, 2], [0.1028, 0.8972]], ["V49", [0, 1, 2], [0.0757, 0.9243]], ["V50", [0, 1, 2], [0.00020597, 0.99979]], ["V51", [0, 1, 2], [0.1607, 0.8393]]], ["0.33647798742138363", ["V50", [0, 1, 2], [0.99959, 0.00040601]], ["V51", [0, 1, 2], [0.4803, 0.5197]], ["V52", [0, 1, 2], [0.136, 0.864]], ["V53", [0, 1, 2], [0.1171, 0.8829]], ["V54", [0, 1, 2], [0.2469, 0.7531]], ["V55", [0, 1, 2], [0.1594, 0.8406]], ["V58", [0, 1, 2], [0.2855, 0.7145]], ["V59", [0, 1, 2], [0.3413, 0.6587]], ["V60", [0, 1, 2], [0.1186, 0.8814]], ["V61", [0, 1, 2], [0.0925, 0.9075]], ["V62", [0, 1, 2], [0.2499, 0.7501]], ["V63", [0, 1, 2], [0.3387, 0.6613]], ["V64", [0, 1, 2], [0.1565, 0.8435]], ["V65", [0, 1, 2], [0.1247, 0.8753]], ["V67", [0, 1, 2], [0.1169, 0.8831]], ["V68", [0, 1, 2], [0.1218, 0.8782]], ["V69", [0, 1, 2], [0.2184, 0.7816]], ["V70", [0, 1, 2], [0.392, 0.608]], ["V71", [0, 1, 2], [0.0931, 0.9069]], ["V72", [0, 1, 2], [0.576, 0.424]], ["V76", [0, 1, 2], [0.5855, 0.4145]], ["V77", [0, 1, 2], [0.4461, 0.5539]], ["V78", [0, 1, 2], [0.7077, 0.2923]], ["V79", [0, 1, 2], [0.5661, 0.4339]]], ["0.6971561389116763", ["V72", [0, 1, 2], [0.0592, 0.9408]], ["V76", [0, 1, 2], [0.0778, 0.9222]], ["V77", [0, 1, 2], [0.0276, 0.9724]], ["V78", [0, 1, 2], [0.0931, 0.9069]], ["V79", [0, 1, 2], [0.0682, 0.9318]], ["V73", [0, 1, 2], [0.99968, 0.00031867]], ["V74", [0, 1, 2], [0.5092, 0.4908]]], ["0.5712332512988788", ["V73", [0, 1, 2], [0.00023923, 0.99976]], ["V74", [0, 1, 2], [0.2084, 0.7916]], ["V75", [0, 1, 2], [0.1274, 0.8726]], ["V80", [0, 1, 2], [0.173, 0.827]], ["V81", [0, 1, 2], [0.2115, 0.7885]], ["V82", [0, 1, 2], [0.1543, 0.8457]], ["V83", [0, 1, 2], [0.2213, 0.7787]], ["V84", [0, 1, 2], [0.2288, 0.7712]], ["V85", [0, 1, 2], [0.00019099, 0.99981]], ["V93", [0, 1, 2], [0.0978, 0.9022]]], ["0.28438610883237625", ["V85", [0, 1, 2], [0.99952, 0.00048031]], ["V93", [0, 1, 2], [0.4885, 0.5115]], ["V86", [0, 1, 2], [0.1659, 0.8341]], ["V87", [0, 1, 2], [0.1383, 0.8617]], ["V88", [0, 1, 2], [0.0914, 0.9086]], ["V89", [0, 1, 2], [0.2481, 0.7519]], ["V90", [0, 1, 2], [0.1587, 0.8413]], ["V91", [0, 1, 2], [0.1945, 0.8055]], ["V92", [0, 1, 2], [0.115, 0.885]], ["V94", [0, 1, 2], [0.2259, 0.7741]], ["V95", [0, 1, 2], [0.168, 0.832]], ["V96", [0, 1, 2], [0.1802, 0.8198]], ["V97", [0, 1, 2], [0.2381, 0.7619]], ["V98", [0, 1, 2], [0.282, 0.718]], ["V99", [0, 1, 2], [0.2087, 0.7913]]]]], "rootWeights": [0.44227543083727316, 0.5577245691627268]}

def pTest():
    pairing = getTestNodes()
    processor(pairing["spn"],pairing["data"],pairing["marginal"],pairing["rootWeights"])
    return sum([len(x) for x in pairing["spn"]])